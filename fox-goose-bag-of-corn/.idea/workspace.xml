<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="df77601d-d265-428b-9f8a-f2943eee5f76" name="Default Changelist" comment="">
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/../magic-square/src/magic_square/puzzle.clj" beforeDir="false" afterPath="$PROJECT_DIR$/../magic-square/src/magic_square/puzzle.clj" afterDir="false" />
    </list>
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="Git.Settings">
    <option name="PREVIOUS_COMMIT_AUTHORS">
      <list>
        <option value="MawiraIke &lt;mawiraike@gmail.com&gt;" />
      </list>
    </option>
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$/.." />
  </component>
  <component name="MacroExpansionManager">
    <option name="directoryName" value="aeTGfBXT" />
  </component>
  <component name="ProjectId" id="1Pt7j910GJqbPns77j4i1EL8KJP" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true">
    <ConfirmationsSetting value="1" id="Add" />
  </component>
  <component name="PropertiesComponent">
    <property name="WebServerToolWindowFactoryState" value="false" />
    <property name="aspect.path.notification.shown" value="true" />
    <property name="last_opened_file_path" value="$PROJECT_DIR$/../../../../../smart-web/easy-church-api" />
    <property name="nodejs_interpreter_path.stuck_in_default_project" value="undefined stuck path" />
    <property name="nodejs_npm_path_reset_for_default_project" value="true" />
    <property name="nodejs_package_manager_path" value="npm" />
    <property name="settings.editor.selected.configurable" value="reference.settings.project.osgi.project.settings" />
    <property name="show.migrate.to.gradle.popup" value="false" />
  </component>
  <component name="ReplState" timestamp="1568836228228">{:repl-history {:ide [], :local [{:command &quot;(assoc (get (for [i (map #(disj (set %) :goose) @current-pos)] (conj (empty []) (vec i))) 0) 2 (conj (get (get (for [i (map #(disj (set %) :goose) @current-pos)] (conj (empty []) (vec i))) 0) 2) :goose))&quot;, :offset 203, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(perform-move)&quot;, :offset 14, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(filterv (complement #{:goose})\n         @current-pos)&quot;, :offset 54, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(for [i #{:you :fox :corn} #{:boat} #{}] (conj (empty []) (vec i)))&quot;, :offset 67, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(for [i (#{:you :fox :corn} #{:boat} #{})] (conj (empty []) (vec i)))&quot;, :offset 69, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(map #(disj (set %) :goose) @current-pos)&quot;, :offset 41, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(.getClass (map #(disj (set %) :goose) @current-pos))&quot;, :offset 53, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(-&gt;&gt; (map #(disj (set %) :goose) @current-pos)\n     (fn [init-elems]\n       (doseq  [[i init-elems] (conj (empty []) (vec i))])))&quot;, :offset 129, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(-&gt;&gt; (map #(disj (set %) :goose) @current-pos)\n     (fn [init-elems]\n       (for [i init-elems] (conj (empty []) (vec i)))))&quot;, :offset 124, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;fox_goose_bag_of_corn.puzzle$eval1971$fn__1972\n0xc882eae&quot;, :offset 56, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;@fox_goose_bag_of_corn.puzzle$eval1971$fn__19720xc882eae&quot;, :offset 56, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(-&gt;&gt; (map #(disj (set %) :goose) @current-pos)\n     (fn [init-elems]\n       (for [i init-elems] (conj (empty []) (vec i))))\n     (fn [new-vec]\n       (reset! current-pos new-vec)))&quot;, :offset 180, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(.getClass (-&gt;&gt; (map #(disj (set %) :goose) @current-pos)\n                (fn [init-elems]\n                  (for [i init-elems] (conj (empty []) (vec i))))\n                (fn [new-vec]\n                  (reset! current-pos new-vec))))&quot;, :offset 236, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(get ([[:fox :corn]] [[:boat]] [[]]) 0)&quot;, :offset 39, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(get [[:fox :corn]] [[:boat]] [[]] 0)&quot;, :offset 37, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(let [new-vec [[:fox :corn]] [[:boat]] [[]]]\n  (get new-vec 0))&quot;, :offset 63, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(let [new-vec [[:fox :corn]] [[:boat]] [[]]]\n  (get-in new-vec 0 0))&quot;, :offset 68, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(for [i (map #(disj (set %) :goose :fox) @current-pos)] (println i))&quot;, :offset 68, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(for [i (map #(disj (set %) :goose :fox) @current-pos)] (get i 0))&quot;, :offset 66, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(for [i (map #(disj (set %) :goose :fox) @current-pos)] (conj (empty []) (get (vec i) 0)))&quot;, :offset 90, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(for [i (map #(disj (set %) :goose :fox) @current-pos)] (get (vec i) 0))&quot;, :offset 72, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(.getClass (for [i (map #(disj (set %) :goose :fox) @current-pos)] (get (vec i) 0)))&quot;, :offset 84, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(.getClass (for [i (map #(disj (set %) :goose :fox) @current-pos)] (vec (get (vec i) 0))))&quot;, :offset 90, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(for [i (map #(disj (set %) :goose :fox) @current-pos)] (vec (get (vec i) 0)))&quot;, :offset 78, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(map #(disj (set %) :goose :fox) @current-pos)&quot;, :offset 46, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(for [i (map #(disj (set %) :goose :fox) @current-pos)] (println (vec i)))&quot;, :offset 74, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(for [i (map #(disj (set %) :goose :fox) @current-pos)] (println (get (vec i) 0)))&quot;, :offset 82, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(for [i (map #(disj (set %) :goose :fox) @current-pos)] (conj empty []) (get (vec i) 0))&quot;, :offset 88, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(let [empty-vec (empty [])\n      remove-element (fn [init-vec]\n                       (map #(disj (set %) :goose :you) init-vec))\n      convert-elements (fn [init-elems]\n                         (for [i init-elems] (conj empty-vec (vec i)))\n                         ;(for [i init-elems] (vec (get (vec i) 0)))\n                         )\n      ]\n  (-&gt;&gt; @current-pos\n       (remove-element)\n       (convert-elements)))&quot;, :offset 416, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(let [empty-vec (empty [])\n      remove-element (fn [init-vec]\n                       (map #(disj (set %) :goose :you) init-vec))\n      convert-elements (fn [init-elems]\n                         (println init-elems)\n                         ;(for [i init-elems] (conj empty-vec (vec i)))\n                         ;(for [i init-elems] (vec (get (vec i) 0)))\n                         )\n      ]\n  (-&gt;&gt; @current-pos\n       (remove-element)\n       (convert-elements)))&quot;, :offset 463, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(let [empty-vec (empty [])\n      remove-element (fn [init-vec]\n                       (map #(disj (set %) :goose :you) init-vec))\n      convert-elements (fn [init-elems]\n                         ;(for [i init-elems] (conj empty-vec (vec i)))\n                         (for [i init-elems] (println i))\n                         )\n      ]\n  (-&gt;&gt; @current-pos\n       (remove-element)\n       (convert-elements)))&quot;, :offset 406, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(let [empty-vec (empty [])\n      remove-element (fn [init-vec]\n                       (map #(disj (set %) :goose :you) init-vec))\n      convert-elements (fn [init-elems]\n                         ;(for [i init-elems] (conj empty-vec (vec i)))\n                         (for [i init-elems] (conj empty-vec (vec i)))\n                         )\n      ]\n  (-&gt;&gt; @current-pos\n       (remove-element)\n       (convert-elements)))&quot;, :offset 419, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(let [empty-vec (empty [])\n      remove-element (fn [init-vec]\n                       (map #(disj (set %) :goose :you) init-vec))\n      convert-elements (fn [init-elems]\n                         (println (.length init-elems))\n                         ;(for [i init-elems] (conj empty-vec (vec i)))\n                         ;(for [i init-elems] (vec (get (vec i) 0)))\n                         )\n      ]\n  (-&gt;&gt; @current-pos\n       (remove-element)\n       (convert-elements)))&quot;, :offset 473, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(let [empty-vec (empty [])\n      remove-element (fn [init-vec]\n                       (map #(disj (set %) :goose :you) init-vec))\n      convert-elements (fn [init-elems]\n                         ;(for [i init-elems] (conj empty-vec (vec i)))\n                         (for [i init-elems] (println (vec i)))\n                         )\n      ]\n  (-&gt;&gt; @current-pos\n       (remove-element)\n       (convert-elements)))&quot;, :offset 412, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(let [empty-vec (empty [])\n      remove-element (fn [init-vec]\n                       (map #(disj (set %) :goose :you) init-vec))\n      convert-elements (fn [init-elems]\n                         ;(for [i init-elems] (conj empty-vec (vec i)))\n                         (for [i init-elems] (println (into [] i)))\n                         )\n      ]\n  (-&gt;&gt; @current-pos\n       (remove-element)\n       (convert-elements)))&quot;, :offset 416, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(let [empty-vec (empty [])\n      remove-element (fn [init-vec]\n                       (map #(disj (set %) :goose :you) init-vec))\n      convert-elements (fn [init-elems]\n                         (for [i init-elems] (conj empty-vec (vec i)))\n                         ;(for [i init-elems] (println (into [] i)))\n                         )\n      ]\n  (-&gt;&gt; @current-pos\n       (remove-element)\n       (convert-elements)))&quot;, :offset 416, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(.getClass ([[:fox :corn]] [[:boat]] [[]]))&quot;, :offset 43, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(get [[[:fox :corn]] [[:boat]] [[]]] 0)&quot;, :offset 39, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(get [[[:fox :corn]] [[:boat]] [[]]] 2)&quot;, :offset 39, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(empty [])&quot;, :offset 10, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(conj (empty []) [:fox :corn] [:boat] [:goose :you])&quot;, :offset 52, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(for [i (map #(disj (set %) :goose :fox) @current-pos)] (conj (empty []) (vec i)))&quot;, :offset 82, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(doseq [[n elem] (map-indexed #(vector %1 %2) (map #(disj (set %) :goose :fox) @current-pos))]\n  (println n \&quot;-&gt;\&quot; elem))&quot;, :offset 119, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(doseq [[n elem] (map-indexed #(vector %1 %2) (map #(disj (set %) :goose :fox) @current-pos))]\n  (conj (empty []) (vec elem)))&quot;, :offset 126, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(let [empty-vec []]\n  (doseq [[n elem] (map-indexed #(vector %1 %2) (map #(disj (set %) :goose :fox) @current-pos))]\n    (do\n      (conj empty-vec (vec elem))\n      (print empty-vec))))&quot;, :offset 185, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(let [empty-vec []]\n  (doseq [[n elem] (map-indexed #(vector %1 %2) (map #(disj (set %) :goose :fox) @current-pos))]\n    (do\n      (conj empty-vec elem)\n      (print empty-vec))))&quot;, :offset 179, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(let [empty-vec []]\n  (doseq [[n elem] (map-indexed #(vector %1 %2) (map #(disj (set %) :goose :fox) @current-pos))]\n    (do\n      (conj empty-vec elem)\n      )))&quot;, :offset 4} {:command &quot;(doseq [[n elem] (map-indexed #(vector %1 %2) (map #(disj (set %) :goose :fox) @current-pos))]\n  (println elem))&quot;, :offset 112, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(for [i (map #(disj (set %) :goose :you) @current-pos)] (conj (empty []) (vec i)))&quot;, :offset 82, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(mapv vec (map #(disj (set %) :goose :you) @current-pos))&quot;, :offset 57, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(get (mapv vec (map #(disj (set %) :goose :you) @current-pos)) 2)&quot;, :offset 65, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(vec [:goose :you])&quot;, :offset 19, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(conj \n  (get (mapv vec (map #(disj (set %) :goose :you) @current-pos)) 2) \n  (vec [:goose :you]))&quot;, :offset 98, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(assoc (mapv vec (map #(disj (set %) :goose :you) @current-pos)) 2 \n               (conj\n                   (get (mapv vec (map #(disj (set %) :goose :you) @current-pos)) 2)\n                   (vec [:goose :you])))&quot;, :offset 214, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(assoc (mapv vec (map #(disj (set %) :goose :you) @current-pos)) 2 \n               (conj\n                   (get (mapv vec (map #(disj (set %) :goose :you) @current-pos)) 2)\n                   :goose :you))&quot;, :offset 206, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(perform-move :goose)&quot;, :offset 21, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(perform-move :goose :fox)&quot;, :offset 26, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(defn perform-move\n  \&quot;This move is called to perform a move\&quot;\n  ([elem] (let [remove-element (fn [init-vec]\n                                 ;Thanks to https://stackoverflow.com/questions/57591009/converting-a-set-to-a-vector-results-in-a-vector-of-nested-vectors-in-clojure/57591310#57591310\n                                 (mapv vec (map #(disj (set %) elem :you) init-vec)))\n                do-swap (fn [new-vec]\n                          (reset! current-pos new-vec))\n                add-elem (fn [new-vec]\n                           (assoc new-vec 2 (conj (get new-vec 2) elem :you)))]\n            (-&gt;&gt; @current-pos\n                 (remove-element)\n                 (do-swap)\n                 (add-elem))))\n  ([elem-1 elem-2] (let [remove-element (fn [init-vec]\n                                          (mapv vec (map #(disj (set %) elem-1 elem-2 :you) init-vec)))\n                         do-swap (fn [new-vec]\n                                   (reset! current-pos new-vec))\n                         add-elem (fn [new-vec]\n                                    (assoc new-vec 2 (conj (get new-vec 2) elem-1 elem-2 :you)))]\n                     (-&gt;&gt; @current-pos\n                          (remove-element)\n                          (do-swap)\n                          (add-elem)))))&quot;, :offset 1288, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(get @current-pos 0)&quot;, :offset 20, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(if [check-friendliness :fox :goose]\n  (:true)\n  (:false))&quot;, :offset 58, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(if [(check-friendliness :fox :goose)]\n  :true\n  :false)&quot;, :offset 56, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(check-friendliness :fox :goose)&quot;, :offset 32} {:command &quot;(get 0 [[:goose] [:boat] [:fox :corn :you]])&quot;, :offset 44, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(get [[:goose] [:boat] [:fox :corn :you]] 0)&quot;, :offset 44, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(conj (get [[:goose] [:boat] [:fox :corn :you]] 0) :you)&quot;, :offset 56, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(assoc [[:goose] [:boat] [:fox :corn :you]] 2 (conj (get [[:goose] [:boat] [:fox :corn :you]] 0) :you))&quot;, :offset 103, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(assoc [[:goose] [:boat] [:fox :corn :you]] 0 (conj (get [[:goose] [:boat] [:fox :corn :you]] 0) :you))&quot;, :offset 103, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(print [[:goose] [:boat] [:fox :corn :you]])&quot;, :offset 44, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(mapv vec (map #(disj (set %) :you) nil))&quot;, :offset 41, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(println [[:goose :you] [:boat] [:fox :corn]])&quot;, :offset 46, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(loop [side-a (get @current-pos 0)]\n  (println side-a))&quot;, :offset 55, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(loop [side-a (get @current-pos 0)\n       count (atom 0)]\n  (do\n    (println side-a)\n    (print count)\n    (swap! count (fn [n]\n                   (+ n 1)))))&quot;, :offset 158, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(loop [side-a (get @current-pos 0)\n       count (atom 0)]\n  (do\n    (println side-a)\n    (print count)\n    (swap! count (fn [n]\n                   (+ n 1)))\n    (recur)))&quot;, :offset 170, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(perform-move :fox :corn)&quot;, :offset 25, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(perform-move2 :fox :goose @current-pos)&quot;, :offset 40, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(not true)&quot;, :offset 10, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(river-crossing-plan2 )&quot;, :offset 23, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(mapv vec (map #(disj (set %) (get-in [[:fox :goose :corn :you] [:boat] []][1 0])) [[:fox :goose :corn :you] [:boat] []]))&quot;, :offset 122, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(mapv vec (map #(disj (set %) (get-in [[:fox :corn :you] [:goose] []][1 0])) [[:fox :goose :corn :you] [:boat] []]))&quot;, :offset 116, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(let [function (fn [data item]\n        (let [n (count (first data))\n              i (.indexOf (flatten data) item)]\n          (if (pos? i)\n            (list (quot i n) (mod i n)))))]\n  (function [[:fox :goose :corn :you] [:boat] []] :you))&quot;, :offset 239, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(.indexOf (let [function (fn [data item]\n                           (let [n (count (first data))\n                                 i (.indexOf (flatten data) item)]\n                             (if (pos? i)\n                               (list (quot i n) (mod i n)))))]\n            (function [[:fox :goose :corn :you] [:boat] []] :you)) 0)&quot;, :offset 338, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(.length [[:fox :goose :corn :you] [:boat] []])&quot;, :offset 47, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(.length (get [[:fox :goose :corn :you] [:boat] []] 0))&quot;, :offset 55, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(current-pos)&quot;, :offset 13, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(assoc [[:corn] [:boat] [:goose]] 1 (conj (get [[:corn] [:boat] [:goose]] 2) :fox :you))&quot;, :offset 88, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(assoc [[:corn] [:boat] [:goose]] 2 (conj (get [[:corn] [:boat] [:goose]] 2) :fox :you))&quot;, :offset 88, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(mapv vec (map #(disj (set %) :goose) [[:corn] [:boat] [:goose :fox :you]]))&quot;, :offset 76, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(assoc [[:corn] [:boat] [:you :fox]] 2 (conj (get [[:corn] [:boat] [:you :fox]] 2) :goose))&quot;, :offset 91, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(assoc [[:corn] [:boat] [:you :fox]] 1 (conj (get [[:corn] [:boat] [:you :fox]] 2) :goose))&quot;, :offset 91, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(assoc [[:corn] [:boat] [:you :fox]] 1 (conj (get [[:corn] [:boat] [:you :fox]] 1) :goose))&quot;, :offset 91, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(mapv vec (map #(disj (set %) :goose :you) [[:corn] [:boat :goose] [:fox :you]]))&quot;, :offset 81, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(assoc [[:corn] [:boat] [:fox]] 0 (conj (get [[:corn] [:boat] [:fox]] 0) :goose :you))&quot;, :offset 86, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(mapv vec (map #(disj (set %) :corn :you) [[:corn :goose :you] [:boat] [:fox]]))&quot;, :offset 80, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(assoc [[:goose] [:boat] [:fox]] 1 (conj (get @current-pos 1) [[:goose] [:boat] [:fox]]))&quot;, :offset 89, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(assoc [[:goose] [:boat] [:fox]] 1 (conj (get @current-pos 1) :corn))&quot;, :offset 69, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(assoc [[:goose] [:boat] [:fox]] 1 (conj (get [[:goose] [:boat] [:fox]] 1) :corn))&quot;, :offset 82, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;@current-pos&quot;, :offset 12, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(river-crossing-plan )&quot;, :offset 22, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(river-crossing-plan @start-pos)&quot;, :offset 32, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;} {:command &quot;(river-crossing-plan @current-pos)&quot;, :offset 34, :ns &quot;fox-goose-bag-of-corn.puzzle&quot;}], :remote []}}</component>
  <component name="RunDashboard">
    <option name="ruleStates">
      <list>
        <RuleState>
          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
        </RuleState>
        <RuleState>
          <option name="name" value="StatusDashboardGroupingRule" />
        </RuleState>
      </list>
    </option>
  </component>
  <component name="RunManager">
    <configuration name="REPL" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <module name="fox-goose-bag-of-corn" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <module name="" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <setting name="host" value="" />
      <setting name="port" value="0" />
      <setting name="replType" value="0" />
      <module name="" />
      <method v="2" />
    </configuration>
  </component>
  <component name="SvnConfiguration">
    <configuration />
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="df77601d-d265-428b-9f8a-f2943eee5f76" name="Default Changelist" comment="" />
      <created>1565697833996</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1565697833996</updated>
      <workItem from="1565697839018" duration="3071000" />
      <workItem from="1566038256589" duration="2404000" />
      <workItem from="1566120728606" duration="4461000" />
      <workItem from="1566167415063" duration="11454000" />
      <workItem from="1566291308101" duration="5649000" />
      <workItem from="1566323155718" duration="596000" />
      <workItem from="1566379788241" duration="9849000" />
      <workItem from="1566460369949" duration="2381000" />
      <workItem from="1566466791361" duration="595000" />
      <workItem from="1566498198412" duration="1398000" />
      <workItem from="1566650530652" duration="1058000" />
      <workItem from="1566681680809" duration="367000" />
      <workItem from="1566767186785" duration="789000" />
      <workItem from="1566907668826" duration="86000" />
      <workItem from="1567012015578" duration="3491000" />
      <workItem from="1567071222291" duration="5141000" />
      <workItem from="1567112187658" duration="20000" />
      <workItem from="1567145606557" duration="27000" />
      <workItem from="1567174360821" duration="1660000" />
      <workItem from="1567178590753" duration="1421000" />
      <workItem from="1567188857356" duration="701000" />
      <workItem from="1567242575135" duration="125000" />
      <workItem from="1567246845624" duration="1747000" />
      <workItem from="1567454536772" duration="35000" />
      <workItem from="1567455030974" duration="676000" />
      <workItem from="1567697819952" duration="2046000" />
      <workItem from="1567708123365" duration="2430000" />
      <workItem from="1567765248210" duration="1086000" />
      <workItem from="1567793228609" duration="18000" />
      <workItem from="1568043810206" duration="605000" />
      <workItem from="1568136793770" duration="5426000" />
      <workItem from="1568195587145" duration="7846000" />
      <workItem from="1568224539675" duration="1308000" />
      <workItem from="1568278826890" duration="6710000" />
      <workItem from="1568314538600" duration="73000" />
      <workItem from="1568399588786" duration="15000" />
      <workItem from="1568481465984" duration="632000" />
      <workItem from="1568833775116" duration="2451000" />
      <workItem from="1568918857516" duration="659000" />
      <workItem from="1568961922406" duration="76000" />
      <workItem from="1568962025228" duration="461000" />
    </task>
    <task id="LOCAL-00001" summary="Stuck">
      <created>1567765438254</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1567765438254</updated>
    </task>
    <task id="LOCAL-00003" summary="Solution one">
      <created>1568314595660</created>
      <option name="number" value="00003" />
      <option name="presentableId" value="LOCAL-00003" />
      <option name="project" value="LOCAL" />
      <updated>1568314595660</updated>
    </task>
    <option name="localTasksCounter" value="4" />
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="1" />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State>
              <option name="COLUMN_ORDER" />
            </State>
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="Stuck" />
    <MESSAGE value="Solution one" />
    <option name="LAST_COMMIT_MESSAGE" value="Solution one" />
  </component>
  <component name="XDebuggerManager">
    <breakpoint-manager>
      <breakpoints>
        <line-breakpoint enabled="true" type="java-line">
          <url>file://$PROJECT_DIR$/src/fox_goose_bag_of_corn/puzzle.clj</url>
          <line>78</line>
          <option name="timeStamp" value="1" />
        </line-breakpoint>
        <line-breakpoint enabled="true" type="java-line">
          <url>file://$PROJECT_DIR$/src/fox_goose_bag_of_corn/puzzle.clj</url>
          <line>180</line>
          <option name="timeStamp" value="2" />
        </line-breakpoint>
      </breakpoints>
    </breakpoint-manager>
  </component>
</project>